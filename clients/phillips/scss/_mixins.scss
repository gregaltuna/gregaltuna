/// THIS PREFIX MIXING THINGY from ANDY.SCSS
/// Mixin helper to output vendor-prefixed CSS
/// @access private
/// @author HugoGiraudel
/// @param {String} $property - Unprefixed CSS property
/// @param {*} $value - Raw CSS value
/// @param {List} $prefixes [()] - List of prefixes to output
@mixin prefix($property, $value, $prefixes: ()) {
  @each $prefix in $prefixes {
    -#{$prefix}-#{$property}: $value;
  }

  #{$property}: $value;
}

// EM/REM FALLBACK appended with EMs: http://zerosixthree.se/
@function calculateEm($size) {
  $emSize: $size / 16px;
  @return $emSize * 1em;
}

@function calculateRem($size) {
  $remSize: $size / 16px;
  @return $remSize * 1rem;
}

@mixin font-size($size) {
  font-size: $size;
  font-size: calculateEm($size);
  font-size: calculateRem($size);
}

// VERTICALLY AND HORIZONTALLY CENTER A RELATIVE POSITIONED ELEMENT
@mixin relativecenter {
  position: relative;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
  margin: 0 auto;
}

// VERTICALLY and/or HORIZONTALLY CENTERS AN ABSOLUTE POSITIONED ELEMENT
@mixin center($xy:xy) {
  @if $xy == xy {
    left: 50%;
    top: 50%;
    bottom: auto;
    right: auto;
    @include transform(translateX(-50%) translateY(-50%));
  }
  @else if $xy == x {
    left: 50%;
    right: auto;
    @include transform(translateX(-50%));
  }
  @else if $xy == y {
    top: 50%;
    bottom: auto;
    @include transform(translateY(-50%));
  }
}

/// 
@mixin centerCancel {
	top: inherit !important;
	right: inherit !important;
	bottom: inherit !important;
	left: inherit !important;
	position: inherit !important;
//	-webkit-transform: none !important;
//	-moz-transform: none !important;
//	-o-transform: none !important;
//	transform: none !important;
  @include prefix(transform, none !important, 'webkit' 'moz' 'ms' 'o');
}

// SIMPLE ABSOLUTE CENTER from ANDY.SCSS
/// Horizontally and vertically centers block elements
/// Important: you must have a parent element with `position: relative`.
/// @access public
/// @example scss - Usage
///   .foo {
///     @include center-both;
///   }
/// @example css - Result
///   .foo {
///     position: absolute;
///     top: 50%;
///     left: 50%;
///     -webkit-transform: translate(-50%, -50%);
///     -ms-transform: translate(-50%, -50%);
///     transform: translate(-50%, -50%);
///   }
@mixin center-both {
    position: absolute;
    top: 50%;
    left: 50%;
    @include prefix(transform, translate(-50%, -50%), 'webkit' 'moz' 'ms' 'o');
}

// BORDER RADIUS from ANDY.SCSS
/// Separated border-radius helpers
/// @access public
/// @param {Length} $top-left-radius - Top left radius
/// @param {Length} $top-right-radius - Top right radius
/// @param {Length} $bottom-right-radius - Bottom right radius
/// @param {Length} $bottom-left-radius - Bottom left radius
/// @example scss - Usage
///   .foo {
///     @include border-radius-separate(1px, 2px, 3px, 4px);
///   }
/// @example css - Result
///   .foo {
///     -webkit-border-top-left-radius: 1px;
///     -moz-border-top-left-radius: 1px;
///     border-top-left-radius: 1px;
///     -webkit-border-top-right-radius: 2px;
///     -moz-border-top-right-radius: 2px;
///     border-top-right-radius: 2px;
///     -webkit-border-bottom-right-radius: 3px;
///     -moz-border-bottom-right-radius: 3px;
///     border-bottom-right-radius: 3px;
///     -webkit-border-bottom-left-radius: 4px;
///     -moz-border-bottom-left-radius: 4px;
///     border-bottom-left-radius: 4px;
///   }
@mixin border-radius-separate($top-left-radius, $top-right-radius, $bottom-right-radius, $bottom-left-radius) {
  @include prefix(border-top-left-radius, $top-left-radius, 'webkit' 'moz' 'ms' 'o');
  @include prefix(border-top-right-radius, $top-right-radius, 'webkit' 'moz' 'ms' 'o');
  @include prefix(border-bottom-right-radius, $bottom-right-radius, 'webkit' 'moz' 'ms' 'o');
  @include prefix(border-bottom-left-radius, $bottom-left-radius, 'webkit' 'moz' 'ms' 'o');
}

// BORDER RADIUS from Levenson
@mixin border-radius($radius:.25em) {
//  -webkit-border-radius: $radius;
//  -moz-border-radius: $radius;
//  -o-border-radius: $radius;
//  border-radius: $radius;
  @include prefix(border-radius, $radius, 'webkit' 'moz' 'ms' 'o');
}

// A SIMPLE CIRCLE DIV from Levenson
@mixin circleSimple($size) {
  content: "";
  position: absolute;
  border-radius: 50%;
  left: calc(50% - #{$size/2});
  top: calc(50% - #{$size/2});
  width: $size;
  height: $size;
}

// A MORE COMPLICATED CIRCLE from Levenson
@mixin circle($size, $color, $display) {
	display: $display;
	line-height: $size;
	width: $size;
	height: $size;
	background: $color;
//	-webkit-border-radius: $size/2;
//		 -moz-border-radius: $size/2;
//					border-radius: $size/2;
	@include prefix(border-radius, $size/2, 'webkit' 'moz' 'ms' 'o');
}

// MULTIPLE BORDERS CIRCLE from Levenson (never really got it to work)
@mixin circles($border: 10px, $outer: red, $middle: blue, $innermost: green) {
  // outer circle
  border: $border solid transparent;
  border-top-color: $outer;
//  border-radius: 50%;
  @include prefix(border-radius, 50%, 'webkit' 'moz' 'ms' 'o');
  @include animation(spin 1.8s linear infinite);

  // middle circle
  &:before {
    content: "";
    position: absolute;
    top: $border;
    left: $border;
    right: $border;
    bottom: $border;
    border: $border solid transparent;
    border-top-color: $middle;
//    border-radius: 50%;
		@include prefix(border-radius, 50%, 'webkit' 'moz' 'ms' 'o');
    @include animation(reverse-spin 1.4s linear infinite);
  }

  // innermost circle
  &:after {
    content: "";
    position: absolute;
    top: $border * 3;
    left: $border * 3;
    right: $border * 3;
    bottom: $border * 3;
    border: $border solid transparent;
    border-top-color: $innermost;
//    border-radius: 50%;
		@include prefix(border-radius, 50%, 'webkit' 'moz' 'ms' 'o');
    @include animation(spin 1.8s linear infinite);
  }
}

@mixin size($width, $height: $width) {
	width: $width;
	height: $height;
}

@mixin square($size) {
	width: $size;
	height: $size;
	display: block;
	overflow: inherit;
}

@mixin box-shadow ($param) {
//-webkit-box-shadow: $param;
//   -moz-box-shadow: $param;
//        box-shadow: $param;
	@include prefix(box-shadow, $param, 'webkit' 'moz' 'ms' 'o');
}

@mixin bg-clip ($b) {
@if $b == border-box {
	-webkit-background-clip: border;  /* Safari 4? Chrome 6? */
	-moz-background-clip: border;     /* Firefox 3.6 */
//		    background-clip: $b;      /* Firefox 4, Safari 5, Opera 10, IE 9 */
	@include prefix(background-clip, $b, 'ms' 'o');
}

@else if $b == padding-box {
  -webkit-background-clip: padding;  /* Safari 4? Chrome 6? */
     -moz-background-clip: padding;     /* Firefox 3.6 */
  	    background-clip: $b;      /* Firefox 4, Safari 5, Opera 10, IE 9 */
}

@else if $b == content-box {
	-webkit-background-clip: content;  /* Safari 4? Chrome 6? */
	-moz-background-clip: content;     /* Firefox 3.6 */
//		    background-clip: $b;      /* Firefox 4, Safari 5, Opera 10, IE 9 */
	@include prefix(background-clip, $b, 'ms' 'o');
	}
}

// COLORS with TRANSPARENCY
@mixin transBg ($color, $opacity) {
	background-color: $color;
	background-color: rgba($color, $opacity);
}

@mixin transColor ($color, $opacity) {
	color: $color;
	//-moz-opacity: $opacity;
	color: rgba($color, $opacity);
}

@mixin transBorder ($color, $opacity) {
	border-color: $color;
	border-color: rgba($color, $opacity);
}

// TRANSITIONS
// usage:
//		a {
//			color: gray;
//			@include transition(color .3s ease);
//				&:hover {
//					color: black;
//				}	
//		}	
//
@mixin transition($args...) {
//  -webkit-transition: $args;
//  -moz-transition: $args;
//  -ms-transition: $args;
//  -o-transition: $args;
//  transition: $args;
  @include prefix(transition, $args, 'webkit' 'moz' 'ms' 'o');

}

// CROSS-BROWSER OPACITY
// usage:
//		.faded-text {
//			@include opacity(0.8);
//		}
//
@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}

// CLEARFIX
// sass:
//		.your-container-with-floated-children {
//			@extend %clearfix;
//		}
//
%clearfix {
  *zoom: 1;
  &:before, &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}


// VISUALLY HIDE AN ELEMENT (use instead of display: none; for better accessibility
// usage:
//		<b class="visually-hidden">Open the navigation</b>
//
// sass:
//		.visually-hidden {
//			@extend %visuallyhidden;
//		}
//
%visuallyhidden {
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
  overflow: hidden;
  clip: rect(0 0 0 0);
  clip: rect(0, 0, 0, 0);
  position: absolute;
}

// BOX MODEL
// usage:
//		.sample{
//			@include box-sizing(border-box);
//		}
//
@mixin box-sizing($box-model) {
//	-webkit-box-sizing: $box-model; // Safari <= 5
//	-moz-box-sizing: $box-model; // Firefox <= 19
//	box-sizing: $box-model;
	@include prefix(box-sizing, $box-model, 'webkit' 'moz' 'ms' 'o');
}

// TEXT SHADOW
@mixin text-shadow($x: 2px, $y: 2px, $blur: 5px, $color: rgba(0,0,0,.4)) {
    text-shadow: $x $y $blur $color;
}

// GRID SETTINGS
@mixin g12 { width: calc(100% - (#{$gutter} * 2)); }

@mixin g11 { width: calc(((100%/12)*11) - (#{$gutter}*2)); }

@mixin g10 { width: calc(((100%/12)*10) - (#{$gutter}*2)); }

@mixin g9 { width:  calc(75% - (#{$gutter}*2)); }

@mixin g8 { width: calc(((100%/12)*8) - (#{$gutter}*2)); }

@mixin g7 { width: calc(((100%/12)*7) - (#{$gutter}*2)); }

@mixin g6 { width: calc(50% - (#{$gutter}*2)); }

@mixin g5 { width: calc(((100%/12)*5) - (#{$gutter}*2)); }

@mixin g4 { width: calc(((100%/12)*4) - (#{$gutter}*2)); }

@mixin g3 { width: calc(25% - (#{$gutter}*2)); }

@mixin g2 { width: calc(((100%/12)*2) - (#{$gutter}*2)); }

@mixin g1 { width: calc((100%/12) - (#{$gutter}*2)); }

@mixin g0 { width: 0px; height: 0px; }

@mixin g5th { width: calc(20% - (#{$gutter}*2)); }


// Sass CSS3 Mixins! The Cross-Browser CSS3 Sass Library
// By: Matthieu Aussaguel, http://www.mynameismatthieu.com, @matthieu_tweets
/// Adds a browser prefix to the property
/// @param {*} $property Property
/// @param {*} $value Value

@mixin css3-prefix($property, $value) {
  -webkit-#{$property}: #{$value};
   -khtml-#{$property}: #{$value};
     -moz-#{$property}: #{$value};
      -ms-#{$property}: #{$value};
       -o-#{$property}: #{$value};
          #{$property}: #{$value};
}


/// Background Gradient
/// @param {Color} $startColor [#3C3C3C] - Start Color
/// @param {Color} $endColor [#999999] - End Color

@mixin background-gradient($startColor: #3C3C3C, $endColor: #999999) {
    background-color: $startColor;
    background-image: -webkit-gradient(linear, left top, left bottom, from($startColor), to($endColor));
    background-image: -webkit-linear-gradient(top, $startColor, $endColor);
    background-image:    -moz-linear-gradient(top, $startColor, $endColor);
    background-image:     -ms-linear-gradient(top, $startColor, $endColor);
    background-image:      -o-linear-gradient(top, $startColor, $endColor);
    background-image:         linear-gradient(top, $startColor, $endColor);
    filter:           progid:DXImageTransform.Microsoft.gradient(startColorStr='#{$startColor}', endColorStr='#{$endColor}');
}


/// Background Horizontal
/// @param {Color} $startColor [#3C3C3C] - Start Color
/// @param {Color} $endColor [#999999] - End Color

@mixin background-horizontal($startColor: #3C3C3C, $endColor: #999999) {
    background-color: $startColor;
    background-image: -webkit-gradient(linear, left top, right top, from($startColor), to($endColor));
    background-image: -webkit-linear-gradient(left, $startColor, $endColor);
    background-image:    -moz-linear-gradient(left, $startColor, $endColor);
    background-image:     -ms-linear-gradient(left, $startColor, $endColor);
    background-image:      -o-linear-gradient(left, $startColor, $endColor);
    background-image:         linear-gradient(left, $startColor, $endColor);
    filter:            progid:DXImageTransform.Microsoft.gradient(startColorStr='#{$startColor}', endColorStr='#{$endColor}', gradientType='1');
}


/// Background Radial
/// @param {Color} $startColor [#3C3C3C] - Start Color
/// @param {Percentage} $startPos [0%] - Start position
/// @param {Color} $endColor [#999999] - End Color
/// @param {Percentage} $endPos [100%] - End position

@mixin background-radial($startColor: #FFFFFF, $startPos: 0%, $endColor: #000000, $endPos:100%) {
    background: -moz-radial-gradient(center, ellipse cover, $startColor $startPos, $endColor $endPos);
    background: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop($startPos,$startColor), color-stop($endPos,$endColor));
    background: -webkit-radial-gradient(center, ellipse cover, $startColor $startPos,$endColor $endPos);
    background: -o-radial-gradient(center, ellipse cover, $startColor $startPos,$endColor $endPos);
    background: -ms-radial-gradient(center, ellipse cover, $startColor $startPos,$endColor $endPos);
    background: radial-gradient(ellipse at center, $startColor $startPos,$endColor $endPos);
}


/// Background Size
/// @param {Size} $width [100%] - Width
/// @param {Size} $width [$width] - Height
/// @require {mixin} css3-prefix

@mixin background-size($width: 100%, $height: $width) {
  @if type-of($width) == 'number' and $height != null {
    @include css3-prefix('background-size', $width $height);
  } @else {
    @include css3-prefix('background-size', $width);
  }
}

/// Background Color Opacity
/// @param {Color} $color [100%] - Color
/// @param {Double} $opacity [0.85] - Opacity

@mixin background-opacity($color: #000, $opacity: 0.85) {
  background: $color;
  background: rgba($color, $opacity);
}


/// Border Radius
/// @param {Size} $radius [5px] - Radius
/// @require {mixin} css3-prefix

@mixin border-radius($radius: 5px) {
    @include css3-prefix('border-radius', $radius);
}


/// Border Radius Separate
/// @param {Size} $topLeftRadius [5px] - Top Left
/// @param {Size} $topRightRadius [5px] - Top Right
/// @param {Size} $bottomLeftRadius [5px] - Bottom Left
/// @param {Size} $bottomRightRadius [5px] - Bottom Right

@mixin border-radius-separate($topLeftRadius: 5px, $topRightRadius: 5px, $bottomLeftRadius: 5px, $bottomRightRadius: 5px) {
  -webkit-border-top-left-radius:     $topLeftRadius;
  -webkit-border-top-right-radius:    $topRightRadius;
  -webkit-border-bottom-right-radius: $bottomRightRadius;
  -webkit-border-bottom-left-radius:  $bottomLeftRadius;

  -moz-border-radius-topleft:     $topLeftRadius;
  -moz-border-radius-topright:    $topRightRadius;
  -moz-border-radius-bottomright: $bottomRightRadius;
  -moz-border-radius-bottomleft:  $bottomLeftRadius;

  border-top-left-radius:     $topLeftRadius;
  border-top-right-radius:    $topRightRadius;
  border-bottom-right-radius: $bottomRightRadius;
  border-bottom-left-radius:  $bottomLeftRadius;
}

/// Box Shadow
/// @param {Size} $x [2px] - X
/// @param {Size} $y [2px] - Y
/// @param {Size} $blur [5px] - Blur
/// @param {Color} $color [rgba(0,0,0,.4)] - Color
/// @param {Boolean} $inset - Inset

@mixin box-shadow($x: 2px, $y: 2px, $blur: 5px, $color: rgba(0,0,0,.4), $inset: "") {
  @if ($inset != "") {
    @include css3-prefix('box-shadow', $inset $x $y $blur $color);
  } @else {
    @include css3-prefix('box-shadow', $x $y $blur $color);
  }
}

/// Triple Borders
/// @param {Color} $colorOne [#3C3C3C] - Color One
/// @param {Color} $colorTwo [#999999] - Color Two
/// @param {Color} $colorThree [#000000] - Color Three
/// @param {Size} $radius [0] - Radius
/// @require {mixin} border-radius
/// @require {mixin} css3-prefix

@mixin triple-borders($colorOne: #3C3C3C, $colorTwo: #999999, $colorThree: #000000, $radius: 0) {
    border: 1px solid $colorOne;

    @include border-radius($radius);

    @include css3-prefix('box-shadow', "0 0 0 1px #{$colorTwo}, 0 0 0 2px #{$colorThree}");
}

// APPEARANCE with prefixes
@mixin appearance($value){
  -moz-appearance: $value;
  -webkit-appearance: $value;
  appearance: $value;
}

// ¡MAS IMPORTANTE!
//
// GRID SETTINGS
//
// ¡MAS IMPORTANTE!
$narrow: 480px; //768
$normal: 680px; //960
$wide: 1180px;  //1180

@mixin mobile {
	@media (max-width: #{$normal - 1px}) {
		@content;
	}
}

@mixin narrow {
  @media (min-width: #{$narrow}) and (max-width: #{$normal - 1}) {
    @content;
  }
}

@mixin normal {
  @media (min-width: #{$normal}) {
    @content;
  }
}